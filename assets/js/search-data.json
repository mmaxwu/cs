{
  
    
        "post0": {
            "title": "Pendulum Simulation",
            "content": "Hacks . import matplotlib.pyplot as plt import numpy as np # pendulum parameters GRAVITY = 9.81 # m/s^2 LENGTH = 1 # m MASS = 1 # kg # initial state THETA = np.pi / 4 # radians OMEGA = 0 # radians/second # simulation parameters DELTA_T = 0.001 # seconds TOTAL_TIME = 10 # seconds # calculate the acceleration of the pendulum def acceleration(theta: float) -&gt; float: return -(GRAVITY / LENGTH) * np.sin(theta) # initialize the state of the pendulum theta = THETA omega = OMEGA time = 0 # create empty lists to store the data theta_data = [] omega_data = [] time_data = [] # simulate the pendulum while time &lt; TOTAL_TIME: # append the current state to the data lists theta_data.append(theta) omega_data.append(omega) time_data.append(time) # calculate the next state omega += acceleration(theta) * DELTA_T theta += omega * DELTA_T time += DELTA_T # plot the data plt.plot(time_data, theta_data) plt.xlabel(&#39;Time (s)&#39;) plt.ylabel(&#39;Angle (rad)&#39;) plt.show() . In this simulation, the angle and angular velocity of the pendulum are calculated at each time step using the equations of motion for a simple pendulum. The data is then plotted using matplotlib to visualize the pendulum&#39;s motion. . Simulation in Video games . . Microsoft Flight Simulator is a series of amateur flight simulator programs for Microsoft Windows operating systems. The simulator is used for training pilots and for entertainment purposes. It allows users to fly various types of aircraft in different environments and weather conditions. The simulator includes a realistic flight model and detailed 3D graphics to provide an immersive experience. Microsoft Flight Simulator is groundbreaking because it is one of the longest-running and most successful flight simulator programs. I learned about this because my friend who aspires to become a commercial jet pilot flies on microsoft flight simulator during his free time, and he gave me a tour of his flight setup which was a pretty good replica of a pilot&#39;s cockpit. .",
            "url": "https://mmaxwu.github.io/cs/week%2016/jupyter/2022/12/14/simulation.html",
            "relUrl": "/week%2016/jupyter/2022/12/14/simulation.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Sections 14 and 15 HW",
            "content": "Hacks . Two other popular Python libraries that are commonly used by programmers are Pandas and Matplotlib. . Pandas is a library for working with data in Python. It provides tools for reading and writing data to various formats, as well as tools for manipulating and analyzing data. For example, Pandas includes functions for filtering and sorting data, as well as tools for performing operations like groupby and pivot tables. This makes Pandas a useful tool for working with large datasets, especially those that are tabular or structured in some way. . Matplotlib is a library for creating visualizations in Python. It provides a wide range of plotting functions and tools, including functions for creating scatter plots, line plots, histograms, and more. Matplotlib also includes support for customization and formatting of plots, allowing programmers to create high-quality visualizations that are tailored to their specific needs. This makes Matplotlib a valuable tool for exploring and understanding data, as well as for presenting results and findings to others. . Together, these two libraries provide a powerful set of tools for working with data in Python. Pandas makes it easy to import, manipulate, and analyze data, while Matplotlib provides a variety of tools for creating visualizations that can help to better understand and communicate the insights that can be gleaned from the data. These libraries are commonly used in a wide range of fields, including data science, scientific computing, and machine learning, and can save programmers a significant amount of time and effort when working with data in Python. . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers . import random #random module def generate_and_sort_random_numbers(n): even_numbers = [] ## Create an empty list for even numbers odd_numbers = [] ## Create an empty list for odd numbers for i in range(n): number = random.randint(0, 100) if number % 2 == 0: ## Checks if number is even even_numbers.append(number) else: ## Number is odd odd_numbers.append(number) return even_numbers, odd_numbers even_numbers, odd_numbers = generate_and_sort_random_numbers(10) ## This would generate 10 random numbers, then sort them into lists of even and odd numbers, and return those lists print(even_numbers) print(odd_numbers) . [92, 84, 44, 40, 34, 24, 68] [11, 27, 63] . Derivative . import numpy as np def find_derivative(x): f1 = 2 * x**5 - 6 * x**2 + 24 * x f2 = (13 * x**4 + 4 * x**2) / 2 # Use NumPy&#39;s gradient() function to calculate the derivative of each function df1 = np.gradient(f1) df2 = np.gradient(f2) return df1, df2 df1, df2 = find_derivative(9) # Print the results print(&quot;The derivative of f1(x) at x = 9 is&quot;, df1) print(&quot;The derivative of f2(x) at x = 9 is&quot;, df2) . The derivative of f1(x) at x = 9 is [] The derivative of f2(x) at x = 9 is [] . Random . import random # Create a list of dogs and cats animals = [&quot;dog&quot;] * 10 + [&quot;cat&quot;] * 10 # Use the shuffle() function to randomly rearrange the order of the animals random.shuffle(animals) # Print the resulting list of animals print(animals) . [&#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;cat&#39;, &#39;dog&#39;, &#39;dog&#39;] . This code creates a list of &quot;dog&quot; and &quot;cat&quot; strings, with 10 of each, and then uses the shuffle function to randomly rearrange the order of the animals in the list. Finally, the resulting list is printed to the screen. .",
            "url": "https://mmaxwu.github.io/cs/week%2016/jupyter/2022/12/13/Unit3.14&3.15HW.html",
            "relUrl": "/week%2016/jupyter/2022/12/13/Unit3.14&3.15HW.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3.17 and 3.18 Personal Notes",
            "content": "3.17 Daily Video 1 . An algorithm’s efficiency can be informally measured by determining the number of times a statement or group of statements executes | Different correct algorithms for the same problem can have different efficiencies | . How to implement this in collegeboard? . Give a brief example using sorting algorithms Bubble sort and Insertion sort | Bubble Sort: For each item in list: swap with adjacent item if they are not in order. Repeat until no more swaps are necessary | Insertion Sort: Divides a list into two sublists: sorted and unsorted. Takes the smallest element from the unsorted list and inserts it into the correct position of the sorted list | . | . 3.17 Daily Video 2 . A heuristic is an approach to a problem that is not guaranteed to be optimal every time but can be used since finding the optimal solution would take an unreasonable amount of time | A problem is a general description of a task that can (or cannot) be solved algorithmically | An instance of a problem also includes specific input ex. sorting algorithm | . | A decision problem is a problem with a yes/no answer | An optimization problem is a problem with the goal of finding the “best” solution among many | . How to implement this information into the lesson? . Time complexity covers this topic well | Talk about the different time complexities such as linear, quadratic, and constant | Jishnu will cover the rest | .",
            "url": "https://mmaxwu.github.io/cs/week%2016/jupyter/2022/12/13/CollegeboardNotes.html",
            "relUrl": "/week%2016/jupyter/2022/12/13/CollegeboardNotes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Derivative using NumPy",
            "content": "API&#39;s Using NumPy . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . import random def Dice(n): sum = 0 while n &gt; 0: sum = sum + random.randint(1, 6) n -=1 return sum Dice(5) # Will output a range of 5 to 30 . 15 .",
            "url": "https://mmaxwu.github.io/cs/week%2016/jupyter/2022/12/12/randomvalues.html",
            "relUrl": "/week%2016/jupyter/2022/12/12/randomvalues.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 3 Sections 12 and 13 HW",
            "content": "Homework Organizer . def homework_organizer(assignments): # Sort the homework assignments by due date sorted_assignments = sorted(assignments, key=lambda x: x[1]) # Print the sorted homework assignments for assignment in sorted_assignments: print(assignment[0], &quot;is due on&quot;, assignment[1]) assignments = [ (&quot;Calc HW&quot;, &quot;2022-12-13&quot;), (&quot;CS Hacks&quot;, &quot;2022-12-12&quot;), (&quot;Physics pendulum mini lab&quot;, &quot;2022-12-12&quot;), (&quot;CS Presentation&quot;, &quot;2022-12-14&quot;) ] homework_organizer(assignments) . CS Hacks is due on 2022-12-12 Physics pendulum mini lab is due on 2022-12-12 Calc HW is due on 2022-12-13 CS Presentation is due on 2022-12-14 . This procedure takes a list of homework assignments as input and sorts them by their due date. Then, it prints each assignment and its corresponding due date in order. . GPA Calculator . def calculate_gpa(grades, credits): total_credits = 0 total_grade_points = 0 # Loop through the grades and credits and calculate the total # number of credits and grade points for i in range(len(grades)): grade = grades[i] credit = credits[i] if grade == &quot;A&quot;: grade_points = 4.0 elif grade == &quot;B&quot;: grade_points = 3.0 elif grade == &quot;C&quot;: grade_points = 2.0 elif grade == &quot;D&quot;: grade_points = 1.0 else: grade_points = 0.0 total_credits += credit total_grade_points += grade_points * credit # Calculate and return the GPA gpa = total_grade_points / total_credits return gpa # Example usage grades = [&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;] credits = [3, 3, 3, 2] gpa = calculate_gpa(grades, credits) print(&quot;Your GPA is&quot;, gpa) . Your GPA is 3.8181818181818183 . This procedure takes two lists as input: one for the grades of your courses and one for the number of credits of each course. It calculates your GPA by converting each grade to grade points (A = 4.0, B = 3.0, etc.), multiplying the grade points by the number of credits of the course, and then dividing the total number of grade points by the total number of credits. .",
            "url": "https://mmaxwu.github.io/cs/week%2016/jupyter/2022/12/12/Unit3.12&13HW.html",
            "relUrl": "/week%2016/jupyter/2022/12/12/Unit3.12&13HW.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation .",
            "url": "https://mmaxwu.github.io/cs/lesson/2022/12/12/Simulations.html",
            "relUrl": "/lesson/2022/12/12/Simulations.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Algorithms and Binary Search HW",
            "content": "Flowchart: . Flowchart Link . import random # Initialize the player&#39;s total score to 0 total_score = 0 # Generate three random numbers num1, num2, num3 = random.sample(range(1, 20), 3) # Create a list with the three numbers num_list = [num1, num2, num3] # Find the maximum value in the list max_value = max(num_list) # Add the maximum value to the player&#39;s total score total_score += max_value # Print the player&#39;s updated total score print(&quot;Your total score is: &quot; + str(total_score)) . Your total score is: 16 . The code generates three random numbers from 1 to 20, creates a list with the numbers, finds the maximum value in the list, and then adds the maximum value to the player&#39;s total score. It then prints the player&#39;s updated total score. . Binary Search Hacks . def binary_search(arr, x): # Initialize the start and end indices of the array start = 0 end = len(arr) - 1 # Iterate until the start and end indices overlap while start &lt;= end: # Calculate the middle index of the array mid = (start + end) // 2 # Compare x with the middle element if arr[mid] == x: # Return the middle index if x matches the middle element return mid elif x &gt; arr[mid]: # Update the start index to search the right half of the array start = mid + 1 else: # Update the end index to search the left half of the array end = mid - 1 # If x is not found in the array, return -1 return -1 arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] x = 11 result = binary_search(arr, x) if result != -1: print(&quot;Found at position: &quot; + str(result)) else: print(&quot;Not in the array!&quot;) . Found at position: 10 . In the code above, the binary_search() function takes two arguments: arr, the array to search, and x, the target element we are looking for. The function returns the index of x in the array if it is found, or -1 if it is not found. The code also includes a test that searches for the value 11 in the array [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]. The test prints the index of 11 if it is found, or a message if it is not found. . Collatz Conjecture Hacks . n = 5 # Initialize counter for the number of steps steps = 0 # Iterate until n is 1 while n != 1: # If n is even, divide it by 2 if n % 2 == 0: n = n // 2 # If n is odd, multiply it by 3 and add 1 else: n = 3 * n + 1 # Increment the step counter steps += 1 # Print the number of steps required to reach 1 print(steps) . 5 . In the code above, the while loop continues until n becomes 1. The if statement checks if n is even or odd, and performs the appropriate calculation to update n according to the Collatz conjecture. The steps counter is incremented after each calculation. When the loop ends, the final value of steps is printed, which represents the number of steps required to reach 1. . For the input n = 5, the code would output 6, because it takes 6 steps to reach 1 using the Collatz conjecture starting from n = 5. .",
            "url": "https://mmaxwu.github.io/cs/week%2015/jupyter/2022/12/09/AlgoirthmsBinarySearch-copy.html",
            "relUrl": "/week%2015/jupyter/2022/12/09/AlgoirthmsBinarySearch-copy.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Vocab",
            "content": "Unit 2 . Bits, Bytes, Hexadecimal / Nibbles: A bit is a unit of information that can have two values, typically represented as a 0 or a 1. A byte is a unit of digital information that typically consists of eight bits. Hexadecimal, or &quot;hex&quot; for short, is a numbering system that uses 16 different digits, represented as the numbers 0 through 9 and the letters A through F. Each hexadecimal digit represents four binary digits, also known as a nibble. In other words, two hexadecimal digits can be used to represent one byte. Hexadecimal numbers are often used to represent large binary values in a more compact and human-readable form. . value = 0b1011 # Print the value of the first bit print(f&quot;First bit: {value &amp; 0b1}&quot;) # Print the value of the second bit print(f&quot;Second bit: {value &amp; 0b10}&quot;) # Print the value of the third bit print(f&quot;Third bit: {value &amp; 0b100}&quot;) # Print the value of the fourth bit print(f&quot;Fourth bit: {value &amp; 0b1000}&quot;) . First bit: 1 Second bit: 2 Third bit: 0 Fourth bit: 8 . Binary Numbers: Unsigned Integer, Signed Integer, Floating Point: A binary number is a number expressed in the base-2 numeral system, which uses only two digits: 0 and 1. This is different from the base-10 numeral system, which uses the digits 0 through 9. In computer science, binary numbers are often used to represent values in a computer&#39;s memory or to represent data being transmitted between computer systems. . value = 0b1001 # Print the value of the variable in decimal print(f&quot;Value in decimal: {value}&quot;) # Print the value of the variable in binary print(f&quot;Value in binary: {bin(value)}&quot;) . Value in decimal: 9 Value in binary: 0b1001 . Binary Data Abstractions: Boolean, ASCII, Unicode, RGB: . Boolean data type is a binary data type that can have only two possible values: true or false. It is often used to represent a binary decision or a simple true/false choice in a program. | ASCII encodes characters as numbers. It represents each character with a unique integer value between 0 and 127. ASCII is a 7-bit encoding, which means that it uses 7 bits to represent each character. | Unicode is a standard for encoding characters that includes a much larger range of characters than ASCII. It represents each character with a unique integer value, which can be up to 21 bits in length. Unicode includes all the characters in ASCII, as well as many additional characters from a variety of scripts and languages. | RGB (Red Green Blue) is a color model used to represent colors on a computer or other digital display device. In the RGB model, each color is represented by a combination of red, green, and blue light. The intensity of each color is represented by a number between 0 and 255, with 0 representing no intensity and 255 representing full intensity. | . # Create list of phonetic alpabets words = [&quot;alfa&quot;, &quot;beta&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;julitt&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;wiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] # Get ASCII value of char &#39;a&#39; ascii_a = ord(&#39;a&#39;); # Get input from terminal print(&quot;Please type in a word (alphabets ONLY) ...&quot;) in_string = input() # Convert the input string into all lower case in_string = in_string.lower() print(in_string + &quot; -&gt;&quot; + &quot; n&quot;) # Find ASCII value of each &quot;char&quot; in the &quot;string&quot; # The difference of ASCII value between these characters and &quot;a&quot; # will become the index to the list of words for k in range(len(in_string)) : in_ascii = ord(in_string[k]) - ascii_a print(words[in_ascii]) . Please type in a word (alphabets ONLY) ... mortensen -&gt; mike oscar romeo tango echo november sierra echo november . # Define a string with Unicode characters unicode_string = &quot;Hi, my name is Max&quot; # Print the string to the console print(unicode_string) # Get the length of the string string_length = len(unicode_string) print(f&quot;The length of the string is {string_length} characters.&quot;) # Get the Unicode code point for the first character in the string first_char_code = ord(unicode_string[0]) print(f&quot;The Unicode code point for the first character is {first_char_code}.&quot;) # Convert the Unicode code point to a character first_char = chr(first_char_code) print(f&quot;The character for code point {first_char_code} is {first_char}.&quot;) . Hi, my name is Max The length of the string is 18 characters. The Unicode code point for the first character is 72. The character for code point 72 is H. . # Define a color using RGB values red = (255, 0, 0) # Print the RGB values to the console print(f&quot;Red: {red[0]}&quot;) print(f&quot;Green: {red[1]}&quot;) print(f&quot;Blue: {red[2]}&quot;) # Convert the RGB values to a hexadecimal string hex_string = &quot;#{:02x}{:02x}{:02x}&quot;.format(red[0], red[1], red[2]) print(f&quot;Hexadecimal: {hex_string}&quot;) # Define a function to convert an RGB tuple to a hexadecimal string def rgb_to_hex(rgb): return &quot;#{:02x}{:02x}{:02x}&quot;.format(rgb[0], rgb[1], rgb[2]) # Convert the RGB values to a hexadecimal string using the function hex_string = rgb_to_hex(red) print(f&quot;Hexadecimal: {hex_string}&quot;) . Red: 255 Green: 0 Blue: 0 Hexadecimal: #ff0000 Hexadecimal: #ff0000 . Data Compression: Lossy, LosslessL: Not discussed yet . . Unit 3 . Variables, Data Types, Assignment Operators: A variable is a named location in a computer&#39;s memory where a value can be stored and retrieved. In most programming languages, variables have a specific data type, which determines the kind of values that the variable can store. . Data types are categories that are used to classify the different types of data that can be stored in a variable. Examples of common data types include integers, which are whole numbers, and strings, which are sequences of characters. . Assignment operators are operators that are used to assign a value to a variable. In most programming languages, the assignment operator is the equal sign (=). For example, the following code uses the assignment operator to assign the value 10 to a variable named x: . x = 10 . Once this code is executed, the value 10 will be stored in the variable x, and we can use the variable to access this value later in the program. For example, we could print the value of x using the following code: . print(x) # Output: 10 . It is important to note that the assignment operator is different from the equality operator (==), which is used to compare two values for equality. For example, the following code uses the equality operator to check whether the value of x is equal to 10: . if x == 10: print(&quot;x is equal to 10&quot;) . In this case, the code will print the message &quot;x is equal to 10&quot; because the value of x is indeed equal to 10. . Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class: Managing complexity with variables involves using different data structures to organize and manipulate data in a way that makes it easier to understand and work with. Some common data structures for managing complexity include lists, 2D lists, dictionaries, and classes. . A list is an ordered collection of values that can be of any data type. In most programming languages, lists are enclosed in square brackets ([]) and the values within a list are separated by commas. For example, the following code defines a list of three strings: . names = [&quot;Alice&quot;, &quot;Bob&quot;, &quot;Charlie&quot;] . A 2D list, also known as a two-dimensional array or matrix, is a list of lists. It is a data structure that allows us to store and manipulate data in a grid-like format. For example, the following code defines a 2D list with three rows and four columns: . grid = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] . A dictionary is a data structure that maps keys to values. In most programming languages, dictionaries are enclosed in curly braces ({}) and the keys and values within a dictionary are separated by colons. For example, the following code defines a dictionary that maps strings to integers: . ages = { &quot;Alice&quot;: 25, &quot;Bob&quot;: 30, &quot;Charlie&quot;: 35 } . A class is a blueprint for creating objects. In object-oriented programming, a class defines the attributes and behaviors of a particular type of object. For example, the following code defines a class named Person with two attributes (name and age) and one behavior (a method named greet() that prints a greeting message): . A class is a blueprint for creating objects. In object-oriented programming, a class defines the attributes and behaviors of a particular type of object. For example, the following code defines a class named Person with two attributes (name and age) and one behavior (a method named greet() that prints a greeting message): . These data structures can be used to manage the complexity of data by organizing it in a way that makes it easier to understand and work with. For example, we could use a list to store a collection of strings, a 2D list to store a grid of numbers, a dictionary to store a mapping of keys to values, or a class to define the attributes and behaviors of a particular type of object. .",
            "url": "https://mmaxwu.github.io/cs/week%2015/jupyter/2022/12/07/vocab.html",
            "relUrl": "/week%2015/jupyter/2022/12/07/vocab.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or functions, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = temperature - 32 celsius = celsius * 5/9 return celsius outsideTemp = input(&quot;What is the temperature outside?&quot;) outsideTemp = (convertFahrenheit(int(outsideTemp))) print(outsideTemp) . 15.555555555555555 . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . def gradeCalculation (score): print(&quot;What was the quiz grade?&quot;) quizGrade = input() quizGrade = int(quizGrade) currentGrade = score / 40 currentGrade = currentGrade * 100 if currentGrade &gt; quizGrade: quizGrade = currentGrade print(quizGrade) else: print(currentGrade) print(&quot;What was the overall grade&quot;) finalScore = input() finalScore = (gradeCalculation(int(finalScore))) print(finalScore) . What was the overall grade What was the quiz grade? 75.0 None . Procedural Abstraction . One type of abstraction is __ abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing __ in a program | Subdivision of a program into separate subprograms is called __ | A procedural abstraction may __ shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a __ procedure | Making sure to include the right arguments so the __ can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def procedure() # code goes here return # code goes here .",
            "url": "https://mmaxwu.github.io/cs/lessons/2022/12/07/developing-procedures.html",
            "relUrl": "/lessons/2022/12/07/developing-procedures.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Iterations and 2D Array",
            "content": "sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(&quot;soccer&quot;) sports.insert(1, &quot;hockey&quot;) print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] sports.insert(2, &quot;golf&quot;) # add &quot;golf&quot; as the 3rd element in the list print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . HW Iterations . words = [&quot;alfa&quot;, &quot;beta&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;julitt&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;wiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] # Get ASCII value of char &#39;a&#39; ascii_a = ord(&#39;a&#39;); # Get input from terminal print(&quot;Please type in a word (alphabets ONLY) ...&quot;) in_string = input() # Convert the input string into all lower case in_string = in_string.lower() print(in_string + &quot; -&gt;&quot; + &quot; n&quot;) # Find ASCII value of each &quot;char&quot; in the &quot;string&quot; # The difference of ASCII value between these characters and &quot;a&quot; # will become the index to the list of words for k in range(len(in_string)) : in_ascii = ord(in_string[k]) - ascii_a print(words[in_ascii]) . Please type in a word (alphabets ONLY) ... toby -&gt; tango oscar beta yankee . 2D Array . Find another way to print the matrix | . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for i in matrix: print(*i) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Hacks . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). | . def lookup_keyboard(msg) : # Create a virtual keyboard by 2-D array # - It is actually a list, with 2-dimenstion # - In total it has 4 rows, each row has different number of list elements keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;] ] for k in range(len(msg)) : # Loop each letter in mybirthday bb = msg[k] # Get the k-th letter in mybirthday if bb.isnumeric() : # Convert it to a number if it is numeric bb = int(bb) for i in range(4) : # Loop through each row of keyboard array if keyboard[i].count(bb) : # To check if an element is in the list or NOT idx = keyboard[i].index(bb) # If it is in, then find its index print(keyboard[i][idx]) # Print out the letter in myname by index myname = &quot;Max&quot; myname = myname.upper() print(&quot;My name is : &quot;) lookup_keyboard(myname) print(&quot; n&quot;) mybirthday= &quot;2006.1.25&quot; mybirthday= mybirthday.upper() print(&quot;My birthday is : &quot;) lookup_keyboard(mybirthday) print(&quot; n&quot;) mymonth = &quot;January&quot; mymonth= mymonth.upper() print(&quot;The month of my birthday is : &quot;) lookup_keyboard(mymonth) print(&quot; n&quot;) myage = &quot;16&quot; myage = myage.upper() print(&quot;My age is : &quot;) lookup_keyboard(myage) print(&quot; n&quot;) . My name is : M A X My birthday is : 2 0 0 6 . 1 . 2 5 The month of my birthday is : J A N U A R Y My age is : 1 6 .",
            "url": "https://mmaxwu.github.io/cs/week%2015/jupyter/2022/12/06/IterationsLesson.html",
            "relUrl": "/week%2015/jupyter/2022/12/06/IterationsLesson.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Boolean Iterations and Lists",
            "content": "List and Iterations Notes . Lists . Already took notes on this | List is one of the four collection data types in Python, other 3 are called: Tuple | Set | Dictionary | . | List commands: | . Method | Definition | Examples | . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | .",
            "url": "https://mmaxwu.github.io/cs/week%2015/jupyter/2022/12/05/Unit3-8&10.html",
            "relUrl": "/week%2015/jupyter/2022/12/05/Unit3-8&10.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import _____ # Fill in the blank def Dice(n): # Code here Dice(5) # Will output a range of __ to __ . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | .",
            "url": "https://mmaxwu.github.io/cs/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Booleans and Conditionals",
            "content": "Booleans and conditionals notes . Boolean expressions . What is a boolean? Data type with only true or false | . | Boolean is related to binary They both use 1 and 0 | . | . Relational Operators . For example, comparing the values of print statements | . Logical Operators . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Conditionals . If and else are conditionals For example: . x = 20 y = 10 if x &gt; y: print(“x is greater than y”) else: print(“x is not greater than y”) . | . | .",
            "url": "https://mmaxwu.github.io/cs/week%2014/jupyter/2022/11/30/Unit3-5&6&7.html",
            "relUrl": "/week%2014/jupyter/2022/11/30/Unit3-5&6&7.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "HW for Units 3.5, 3.6, and 3.7",
            "content": "Nested Code Activity . hours = 11 if (hours &lt; 8) { console.log (&quot;This person is unexperienced, salary is 50k!&quot;) } else { if (hours &lt; 10) { console.log (&quot;This person&#39;s salary is 90k, and they are experienced&quot;) } else { if (hours &gt;= 10) { console.log (&quot;This person&#39;s salary is 150k, and they are experienced&quot;) } } } . This person&#39;s salary is 150k, and they are experienced . Conditionals . product = {&quot;expired&quot;:false, &quot;cost&quot;:10} if (product[&quot;expired&quot;] == true) { console.log(&quot;this product is no good&quot;) } else { if (product[&quot;cost&quot;] &gt; 50) { console.log(&quot;this product is too expensive&quot;) } else if (product[&quot;cost&quot;] &gt; 25) { console.log(&quot;this is a regular product&quot;) } else { console.log(&quot;this is a cheap product&quot;) } } . this is a cheap product . Multiple Choice Activity . qAndA = { &quot;question&quot; : [&quot;Who was the leader of the Stalwarts?&quot;, &quot;What is the capital of Canada&quot;, &quot;What country is winning the world cup this year?&quot;], &quot;answers&quot; : [[&quot;Roscoe Conkling&quot;,&quot;James A. Garfield&quot;,&quot;James Blaine&quot;,&quot;Chester A. Arthur&quot;], [&quot;Otawa&quot;,&quot;Ottawa&quot;,&quot;Otawwa&quot;,&quot;Otowa&quot;], [&quot;France&quot;,&quot;Brazil&quot;,&quot;England&quot;,&quot;Argentina&quot;]], &quot;correct&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;], &quot;letters&quot; : [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] } totalQs = len(qAndA[&quot;question&quot;]) i = 0 score = 0 while i != totalQs: qAnswered = False currentQ = qAndA[&quot;question&quot;][i] print(currentQ + &quot; n&quot;) n = 0 while n &lt; 4: print(str(qAndA[&quot;letters&quot;][n]) + &quot;: &quot; + str(qAndA[&quot;answers&quot;][i][n])) n += 1 ans = input(currentQ) ans.lower() print(&quot;&quot;) while qAnswered == False: if ans == &quot;a&quot; or &quot;b&quot; or &quot;c&quot; or &quot;d&quot;: if ans == qAndA[&quot;correct&quot;][i]: score += 1 print(&quot;correct&quot;) else: print(&quot;incorrect :(&quot;) qAnswered = True else: print(&quot;Enter a valid letter option (a, b, c, or d)&quot;) print(&quot;you score is: &quot; + str(score) + &quot; n&quot;) i += 1 . Who was the leader of the Stalwarts? a: Roscoe Conkling b: James A. Garfield c: James Blaine d: Chester A. Arthur correct you score is: 1 What is the capital of Canada a: Otawa b: Ottawa c: Otawwa d: Otowa correct you score is: 2 What country is winning the world cup this year? a: France b: Brazil c: England d: Argentina correct you score is: 3 .",
            "url": "https://mmaxwu.github.io/cs/week%2014/jupyter/2022/11/30/Boolean&ConditionsHW.html",
            "relUrl": "/week%2014/jupyter/2022/11/30/Boolean&ConditionsHW.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Mathematical expressions and strings notes",
            "content": "Mathematical expressions and string notes . Algorithm . Sequencing Algorithms do tasks in the order of specification | . | Selection Helps choose two different outcomes based off a decision | . | Iteration If a condition is true, then the code can repeat | Ex: For loops and while loops are both iterations | . | . Arithmetic Operations . Basic Operations Addition(+), subtraction(-), multiplication(*), division(/), modulus (%) | . | Operations can be done on variables | Order of Operations performed in the same order as operations in math | . | Every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable This is why it is important to keep track of the value of variables | . | . Strings . What is a string? a collection of characters (anything from numbers, letters, spaces, special symbols, etc.) | Different string procedures (python) len() finds the length of the string | lower() convert to lowercase | . | Different string procedures (pseudocode) len() finds the length of the string | concat() returns a string made of the concatenated strings ex. concat(“string1”, “string2”) would return string1string2 | . | substring() returns the characters from the string beginning at the first position to the last ex. substring (“abcdefghijk”, 2, 5) would print bcde (psuedo code starts at 1) | . | . | . | .",
            "url": "https://mmaxwu.github.io/cs/week%2014/jupyter/2022/11/29/Unit3-3&4.html",
            "relUrl": "/week%2014/jupyter/2022/11/29/Unit3-3&4.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "String & Arithmetic Problems",
            "content": "Hacks #1 . Num1 = 50 Num2 = Num1 % 9 + 15 # MOD comes before addition. 50 divided 9 is 5 remainder 5 since MOD only takes the value of the remainder, it will now be 5 + 15 which will make Num2 = 20 Num3 = Num2 / Num1 + ( Num2 * 2 ) # Parenthesis come first. Num2 equals 20. 20 times 2 equals 40. Next operation will be division. Num2, 20, divided by Num1, 50 is 0.4. Next is addition. 0.4 + 40 is 40.4. So Num3 = 40.4 Num4 = Num3 + Num1 / 5 - 10 # Division comes first. Num1 equals 50, so 50 divided by 5 is 10. Next is addition and subtraction. Num3 is 40.4. 40.4 + 10 - 10 is 40.4. So Num4 = 40.4 Result = Num4 - Num2 # Num4 equals 40.4 and Num2 equals 20. 40.4 - 20 is 20.4. So Result = 20.4 print(Result) . Result = 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 # Num1 equals 10. MOD and multiplication go from left to right. 10 divided by 3 is 3 remainder 1 since MOD only takes the value of the remainder, it will now be 1 * 4 which will make Num2 = 4 Num1 = Num2 # The value of Num2, 4, will now be the value of Num1. Num1 = 4 Num3 = Num1 * 3 # The value of Num1 is now 4. 4 * 3 is 12. Num3 = 12 Result = Num3 % 2 # The value of Num3 is 12. 12 divided by 2 is 6 remainder 0. MOD only takes the value of the remainder. Result = 0 print(Result) . Result = 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA # valueC = 17 and valueA = 4. 17 - 4 is 13. The result is being assigned as the new value of valueB, so valueB is now 13. valueA = valueA * 10 # valueA is 4. 4 * 10 is 40. The result is being assigned as the new value of valueA, so valueA is now 40 if valueB &gt; 10: # valueB is now 13. 13 is greater than 10. So it will print valueC, which is 17. print(valueC) . 17 . type = &quot;curly&quot; # initial value of variable &quot;type&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; # value of variable &quot;type&quot; is now &quot;straight&quot; hair = type + color + length # the addition of these non integer values will just concatenate the variables, so print will output &quot;straightbrownshort&quot; print(hair) . straightbrownshort . Hacks #2 . Noun = &quot;Mr. Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;very&quot; Verb = &quot;is&quot; abrev = Noun[0:13] yoda = (abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + Adjective + &quot;.&quot;) print(yoda) . Mr. Mortenson is very handsome. . cookie = &quot;choclate&quot; # 8 characters in the incorrectly spelled word &quot;choclate&quot; cookie2 = &quot;rasin&quot; # 5 characters in the incorrectly spelled word &quot;raisin&quot; len1 = len(cookie) / 2 # there are 8 characters in &quot;choclate&quot;, so len(cookie) = 8. 8 divided by 2 is 4 so len1 equals 4 len2 = len(cookie2) * 45 # there are 6 characters in &quot;rasin&quot;, so len(cookie2) = 5. 5 times 45 is 225 so len2 equals 225 vote1 = str(cookie) + &quot;vote&quot; + str(len2) # I think they want to concatenate these together. The value of cookie is &quot;choclate&quot; and len2 is 225. So vote1 is assigned &quot;choclatevote225&quot; (no space in between) vote2 = str(cookie2) + &quot;vote&quot; + str(len1) # I think they want to concatenate these together. The value of cookie2 is &quot;rasin&quot; and len1 is 4. So vote1 is assigned &quot;rasinvote4&quot; (no space in between) votes = str(vote1) + &quot; &quot; + str(vote2) # concatenate vote1 and vote2 to get &quot;choclatevote225 rasinvote4&quot; print(votes) # vote will be displayed as &quot;choclatevote225 rasinvote4&quot; . choclatevote225 rasinvote4.0 .",
            "url": "https://mmaxwu.github.io/cs/week%2014/jupyter/2022/11/29/String&Arithmetic.html",
            "relUrl": "/week%2014/jupyter/2022/11/29/String&Arithmetic.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Variables, Assignment, and Data Abstraction Notes",
            "content": "Variables, Assignment, and Data Abstraction Notes . Variable . What is a variable? a variable is an abstraction inside a program that can | . | Naming variables capitalizing helps make the variable more clear | make the variable specific enough for you to understand | no spaces | . | . Data . The different types of data Integer: A number | Text/string: A word | Boolean: True/false | . | A list of data can be stored in variables | . Assignment . Need to watch videos about this topic, a bit unclear | . Data Abstraction . Watch vidoes on this, not too sure what data abstraction even is | Indexes start at 1 on the AP exam, unlike python | Lists are good for data abstraction | . List .",
            "url": "https://mmaxwu.github.io/cs/week%2014/jupyter/2022/11/28/Unit3-1&2.html",
            "relUrl": "/week%2014/jupyter/2022/11/28/Unit3-1&2.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Quiz using list",
            "content": "Simple Quiz using just if statements . QandA = [ &quot;1. What is the most common element on Earth?&quot; , &quot;oxygen&quot; , &quot;2. What is the planet closest to our Sun?&quot; , &quot;mercury&quot; , &quot;3. What is the smallest planet in our solar system?&quot; , &quot;mercury&quot; ] points = 0 current = 0 questions = 3 print (&quot;Welcome to my simple quiz&quot;) question1 = input (QandA[current]) print(QandA[0]) if question1 == QandA[current + 1]: print (question1 + &quot; is correct! n&quot;) current += 2 points += 1 else: print(question1 + &quot; is incorrect :( n&quot;) current += 2 question2 = input (QandA[current]) print(QandA[2]) if question2 == QandA[current + 1]: print (question2 + &quot; is correct! n&quot;) current += 2 points += 1 else: print(question2 + &quot; is incorrect :( n&quot;) current += 2 question3 = input (QandA[current]) print(QandA[4]) if question3 == QandA[current + 1]: print (question3 + &quot; is correct! n&quot;) current += 2 points += 1 else: print(question3 + &quot; is incorrect :( n&quot;) current += 2 # If statements not efficient at all. The code does not iterate therefore is not smart print(&quot;Well done, you scored &quot; + str(points) +&quot;/&quot; + str(questions)) . Welcome to my simple quiz 1. What is the most common element on Earth? oxygen is correct! 2. What is the planet closest to our Sun? mercury is correct! 3. What is the smallest planet in our solar system? mercury is correct! Well done, you scored 3/3 . Quiz using loops . QandA = [ &quot;1. What is the most common element on Earth?&quot; , &quot;oxygen&quot; , &quot;2. What is the planet closest to our Sun?&quot; , &quot;mercury&quot; , &quot;3. What is the smallest planet in our solar system?&quot; , &quot;mercury&quot; ] points = 0 current = 0 questions = 1 print (&quot;Welcome to my simple quiz&quot;) while questions &lt; 4: question = input (QandA[current]) # sets the question variable to the &quot;current&quot; index from the dictionary if question == QandA[current + 1]: # &quot;current + 1&quot; represents the answer print(QandA[current]) # print the question first print (question + &quot; is correct! n&quot;) current += 2 points += 1 else: print(QandA[current]) print(question + &quot; is incorrect :( n&quot;) current += 2 questions = questions + 1 print(&quot;Well done, you scored &quot; + str(points) +&quot;/&quot; + str(questions-1)) . Welcome to my simple quiz 1. What is the most common element on Earth? oxygen is correct! 2. What is the planet closest to our Sun? mercury is correct! 3. What is the smallest planet in our solar system? mercury is correct! Well done, you scored 3/3 .",
            "url": "https://mmaxwu.github.io/cs/week%2014/jupyter/2022/11/28/QuizUsingList.html",
            "relUrl": "/week%2014/jupyter/2022/11/28/QuizUsingList.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://mmaxwu.github.io/cs/week%2012/jupyter/2022/11/17/xor.html",
            "relUrl": "/week%2012/jupyter/2022/11/17/xor.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Night at the Museum",
            "content": "We found N@TM to be an overall incredibly fun experience because we got to socialize with other people. We also loved discussing our creations with our classmates. Minesweeper and chess games from other groups were our favorites since they were so beautifully crafted and engaging for users to play. Because the parents of our peers had so many inquiries about our project, we really loved chatting to them. How we were able to gather the various recipes on our website seemed to be the most often asked question, in our opinion. Additionally, speaking with the CSA youth in the adjacent room was enjoyable since it allowed us to learn how the CSA manages its websites. .",
            "url": "https://mmaxwu.github.io/cs/week%2012/jupyter/2022/11/10/N@M.html",
            "relUrl": "/week%2012/jupyter/2022/11/10/N@M.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter d is the 4 letter in the alphabet . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter d is the 4 letter in the alphabet . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . numbers = [] newNumbers = [] i = 0 while i &lt; 101: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0 and numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100] . menu = {&quot;burger&quot;:7.99, &quot;fries&quot;: 3.99, &quot;drink&quot;: 1.99} total = 0 print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) item = input(&quot;Please select an item from the menu&quot;) if item in menu: total = total =+ menu[item] print(total) else: print(item, &quot;not found on menu&quot;) . Menu burger $7.99 fries $3.99 drink $1.99 3.99 .",
            "url": "https://mmaxwu.github.io/cs/2022/10/11/FixingErrors.html",
            "relUrl": "/2022/10/11/FixingErrors.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Personal API",
            "content": "| Overview | Weather | COVID19 | . . import requests api_key = &#39;30d4741c779ba94c470ca1f63045390a&#39; user_input = input(&quot;Enter city: &quot;) weather_data = requests.get( f&quot;https://api.openweathermap.org/data/2.5/weather?q={user_input}&amp;units=imperial&amp;APPID={api_key}&quot;) if weather_data.json()[&#39;cod&#39;] == &#39;404&#39;: print(&quot;No City Found&quot;) else: weather = weather_data.json()[&#39;weather&#39;][0][&#39;main&#39;] temp = round(weather_data.json()[&#39;main&#39;][&#39;temp&#39;]) print(f&quot;The weather in {user_input} is: {weather}&quot;) print(f&quot;The temperature in {user_input} is: {temp}ºF&quot;) . No City Found .",
            "url": "https://mmaxwu.github.io/cs/api/weather",
            "relUrl": "/api/weather",
            "date": " • Oct 8, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Example API",
            "content": "| Overview | Weather | COVID19 | . . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;9b50286be4msh2824eb80bdc078fp151cd7jsn94c270f9f41b&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! .",
            "url": "https://mmaxwu.github.io/cs/api/COVID19",
            "relUrl": "/api/COVID19",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Group Planning for Project + Agile Methodology",
            "content": "Roles . Our team was split up like this: 1) Scrum Master: Max – organize scrum board and make sures framework is followed and is facilitating the scrum 2) Backend Developer: Nathan – build and maintain the technology that that powers all the work behind the scenes 3) Devops: Alyssa – starts with tools/processes needed for coding and deployment to maintenance and updates. 4) Frontend Developer: Sri – builds front end portion of the app (works the interactive and visual part of the design) . “Agile Methodology Diagram” that our group created . . Drafting a Plan for the Final Project (Group Ideas) . One idea for the project would be a an app that consists of multiple games (maybe 3 to 4, something similiar to game pigeon). The games would take user input and it would also need algorithms to shoot basketballs, arrows, etc. This app would teach our team many different skills in programming. In addition, it will take our interest for 8 weeks due to the vast tasks that need to be completed. Our Team Roles: . Frontend Developer: create the visual images of games on the screen | Backend Developer: create algortihims behind the scenes | Dev Ops: make sure website functions correctly | Scrum Master: faciliate the team and assign each member differnet goals, while also helping the frontend and backend developers Because apps like game pigeon already exist, this project may or may not be able to used outside of class. Finally, the project is good for the Create Performance Task because it incorporates all the different College Board requirments | .",
            "url": "https://mmaxwu.github.io/cs/week%205/markdown/2022/09/29/GroupProject.html",
            "relUrl": "/week%205/markdown/2022/09/29/GroupProject.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Javascript Table",
            "content": "//Define data function Data(name, github, fastpages) { this.name = name; this.git = github; this.fastpages = fastpages; } Data.prototype.setRole = function(role) { this.role = role; } Data.prototype.toJSON = function() { const obj = {name: this.name, github: this.github, fastpages: this.fastpages}; const json = JSON.stringify(obj); return json; } //Make new data and put in a list var Max = new Data(&quot;Max&quot;, &quot;https://github.com/mmaxwu/cs&quot;, &quot;https://mmaxwu.github.io/cs/&quot;); var Nathan = new Data(&quot;Nathan&quot;, &quot;https://github.com/nsk1207/fastpages_nathan&quot;, &quot;https://nsk1207.github.io/fastpages_nathan/&quot;); var Sri = new Data(&quot;Sri&quot;, &quot;https://github.com/SRIHITAKOTT1213/APCSP-Blog-Assignment&quot;, &quot;https://srihitakott1213.github.io/APCSP-Blog-Assignment/&quot;) var Alyssa = new Data(&quot;Alyssa&quot;, &quot;https://github.com/alyssar60819/fastpages-blog&quot;, &quot;&quot;) allData = [Max, Nathan, Sri, Alyssa]; //Make a object to hold the data function DataHolder(allData) { this.allData = allData; } //Use object to hold data dataHolder = new DataHolder(allData); //HTML conversion method DataHolder.prototype._toHtml = function() { var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); var table = &quot;&quot;; table += &quot;&lt;tr&gt;&quot;; table += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; table += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; table += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Fastpages&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; table += &quot;&lt;/tr&gt;&quot;; //Go through all data and each data&#39;s properties in a table format for (var row of allData) { table += &quot;&lt;tr&gt;&quot;; table += &quot;&lt;td&gt;&quot; + row.name; table += &quot;&lt;td&gt;&quot; + row.name + &quot;&#39;s Github: &quot; + row.git + &quot;&lt;/td&gt;&quot;; table += &quot;&lt;td&gt;&quot; + row.name + &quot;&#39;s Fastpages: &quot; + row.fastpages + &quot;&lt;/td&gt;&quot;; table += &quot;&lt;tr&gt;&quot; } //Return table return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + table + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(dataHolder._toHtml()); . NameGitHubFastpages . MaxMax&#39;s Github: https://github.com/mmaxwu/cs | Max&#39;s Fastpages: https://mmaxwu.github.io/cs/ | NathanNathan&#39;s Github: | Nathan&#39;s Fastpages: | SriSri&#39;s Github: | Sri&#39;s Fastpages: | AlyssaAlyssa&#39;s Github: | Alyssa&#39;s Fastpages: | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . | . | . | . | .",
            "url": "https://mmaxwu.github.io/cs/week%205/jupyter/2022/09/25/JavascriptTable.html",
            "relUrl": "/week%205/jupyter/2022/09/25/JavascriptTable.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Sorting Algorithms Using Java Script",
            "content": "Bubble Sort . function bubbleSort(arr){ //Outer pass for(let i = 0; i &lt; arr.length; i++){ //Inner pass for(let j = 0; j &lt; arr.length - i - 1; j++){ //Value comparison using ascending order if(arr[j + 1] &lt; arr[j]){ //Swapping [arr[j + 1],arr[j]] = [arr[j],arr[j + 1]] } } }; return arr; }; console.log(bubbleSort([5,3,8,4,6])); . [ 3, 4, 5, 6, 8 ] . Insertion Sort . function insertionSort(arr){ //Start from the second element. for(let i = 1; i &lt; arr.length;i++){ //Go through the elements behind it. for(let j = i - 1; j &gt; -1; j--){ //value comparison using ascending order. if(arr[j + 1] &lt; arr[j]){ //swap [arr[j+1],arr[j]] = [arr[j],arr[j + 1]]; } } }; return arr; } console.log(insertionSort([23, 1, 10, 5, 2])); . [ 1, 2, 5, 10, 23 ] . Selection Sort . function selectionSort(arr) { let min; //start passes. for (let i = 0; i &lt; arr.length; i++) { //index of the smallest element to be the ith element. min = i; //Check through the rest of the array for a lesser element for (let j = i + 1; j &lt; arr.length; j++) { if (arr[j] &lt; arr[min]) { min = j; } } //compare the indexes if (min !== i) { //swap [arr[i], arr[min]] = [arr[min], arr[i]]; } } return arr; } console.log(selectionSort([29, 72, 98, 13, 87, 66, 52, 51, 36])); . [ 13, 29, 36, 51, 52, 66, 72, 87, 98 ] . Merge Sort . //merging two arrays appropriately. function merge(arr1, arr2) { //make a new array and have two value pointers let res = [], i = 0, j = 0; //sorting the first array. if (arr1.length &gt; 1) { let min = 0; for (let i = 0; i &lt; arr1.length; i++) { if (i !== min) { if (arr1[i] &lt; arr1[min]) { //also swap the elements [arr1[i], arr1[min]] = [arr1[min], arr1[i]]; //change the minimum min = i; } } } } //sorting the second array. if (arr2.length &gt; 1) { let min = 0; for (let i = 0; i &lt; arr2.length; i++) { if (i !== min) { if (arr2[i] &lt; arr2[min]) { //also swap the elements [arr2[i], arr2[min]] = [arr2[min], arr2[i]]; //change the minimum min = i; } } } } //Value comparison. while (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) { if (arr1[i] &lt; arr2[j]) { res.push(arr1[i]); i++; } else { res.push(arr2[j]); j++; } } //pushing the rest of arr1. while (i &lt; arr1.length) { res.push(arr1[i]); i++; } //pushing the rest of arr2. while (j &lt; arr2.length) { res.push(arr2[j]); j++; } return res; } //merge sort function mergeSort(arr) { //Best case if (arr.length &lt;= 1) return arr; //splitting into halves let mid = Math.ceil(arr.length / 2); let arr1 = arr.slice(0, mid); let arr2 = arr.slice(mid); let arr1_subarrays = [], sorted_arr1_subarrays = []; let arr2_subarrays = [], sorted_arr2_subarrays = []; //loop through array 1 making subarrays of two elements for (let i = 0; i &lt; arr1.length; i += 2) { arr1_subarrays.push(arr1.slice(i, i + 2)); } //loop through array 2 making subarrays of two elements. for (let i = 0; i &lt; arr2.length; i += 2) { arr2_subarrays.push(arr2.slice(i, i + 2)); } // sorting each subarray of arr1. for (let i = 0; i &lt; arr1_subarrays.length; i += 2) { let result = merge(arr1_subarrays[i], arr1_subarrays[i + 1]); result.forEach((value) =&gt; sorted_arr1_subarrays.push(value)); } // sorting each subarray of arr2. for (let i = 0; i &lt; arr2_subarrays.length; i += 2) { let result = merge(arr2_subarrays[i], arr2_subarrays[i + 1]); result.forEach((value) =&gt; sorted_arr2_subarrays.push(value)); } let result = merge(sorted_arr1_subarrays, sorted_arr2_subarrays); return result; } console.log(mergeSort([70, 50, 30, 10, 20, 40, 60])); . [ 10, 20, 30, 40, 50, 60, 70 ] . Quicksort . function partition(items, left, right) { //rem that left and right are pointers. let pivot = items[Math.floor((right + left) / 2)], i = left, //left pointer j = right; //right pointer while (i &lt;= j) { //increment left pointer if the value is less than the pivot while (items[i] &lt; pivot) { i++; } //decrement right pointer if the value is more than the pivot while (items[j] &gt; pivot) { j--; } //else we swap. if (i &lt;= j) { [items[i], items[j]] = [items[j], items[i]]; i++; j--; } } //return the left pointer return i; } function quickSort(items, left, right) { let index; if (items.length &gt; 1) { index = partition(items, left, right); //get the left pointer returned if (left &lt; index - 1) { //more elements on the left side quickSort(items, left, index - 1); } if (index &lt; right) { //more elements on the right side quickSort(items, index, right); } } return items; //return the sorted array } let items = [5, 3, 7, 6, 2, 9]; console.log(quickSort(items, 0, items.length - 1)); . [ 2, 3, 5, 6, 7, 9 ] .",
            "url": "https://mmaxwu.github.io/cs/week%205/jupyter/2022/09/25/JavascriptSortingAlgorithms.html",
            "relUrl": "/week%205/jupyter/2022/09/25/JavascriptSortingAlgorithms.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "My CSP Journey",
            "content": "CS Before CSP . Hi my name is Max. This is my page to document my journey through CSP. My computer science journey truly started in 8th grade. There were many electives to choose going into the 8th grade, I ended up choosing computer science because that was the class that all of my friends were planning on taking. Having no previous experience in computer science, I naturally struggled throughout the year. But with pain often comes joy. I remember creating my first website using html, spending hours trying to improve every little detail to make my website more appealing. Submitting the website was one of the happiest moments of my life. That feeling of accomplishment is what motivated me to enroll in this class. Having never touched a line of code in three years, it is not surprising to say that I am really rusty. . Iterations . The first thing I learned in Mr. Mortensen&#39;s CSP class is iterations or loops. Iteration is a sequence of instructions that is continually repeated. With iteration, I made a cool little quiz. . def q_and_a(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 print(&quot;Hello, you will be taking the vocabulary test.&quot;) print(&quot;Do you wish to proceed?(y/n)&quot;) msg = input() while (msg!=&quot;y&quot;) : print(&quot;ERROR, YOU HAVE TO SAY YES, DON&#39;T HAVE A CHOICE&quot;) msg = input() print(&quot;You may now proceed&quot;) rsp = q_and_a(&quot;Does static text change? (yes/no)&quot;) if rsp == &quot;no&quot;: print(rsp +&quot; is correct&quot;) correct += 1 else: print(rsp +&quot; is wrong :(&quot;) rsp = q_and_a(&quot;At least how many lines are required to form a sequence of code?(1-4)&quot;) if rsp == &quot;2&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;Is Input and Output in jupyter notebooks in line with Output?(yes/no)&quot;) if rsp == &quot;no&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;Is the computer mice an input?(yes/no)&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;What is a number with a decimal in it called?&quot;) if rsp == &quot;float&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;What is a set of instructions that a computer follows in order to complete a task called?&quot;) if rsp == &quot;program&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(&quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, you will be taking the vocabulary test. Do you wish to proceed?(y/n) You may now proceed Question: Does static text change? (yes/no) n is wrong :( Question: At least how many lines are required to form a sequence of code?(1-4) 2 is correct! Question: Is Input and Output in jupyter notebooks in line with Output?(yes/no) no is correct!! Question: Is the computer mice an input?(yes/no) yes is correct!! Question: What is a number with a decimal in it called? float is correct!! Question: What is a set of instructions that a computer follows in order to complete a task called? code is incorrect! you scored 4/6 . Sorting Algorithms . We haven&#39;t learned this yet, but I wanted to challenge myself with a mini project so I decided to write some algorithms for the different sorting methods. . Bubble Sort . def bubble_sort(list): index_length = len(list) swapped = False #create variable of swapped and set it to false for i in range(index_length-1): #number of iterations for j in range(0, index_length-1): #for every value between the first value and second to last value if list[j] &gt; list[j+1]: swapped = True #values are swapped list[j], list[j+1] = list[j+1], list[j] #switch positions return list list = [64, 34, 25, 12, 22, 11, 90] bubble_sort(list) print(list) . [11, 12, 22, 25, 34, 64, 90] . Selection Sort . def selection_sort(list): indexing_length = len(list) for i in range(indexing_length - 1): #the number of iterations minpos = i #whatever before i is sorted, whatever after i is unsorted; i is the min position for j in range(i, indexing_length): #for every value between i and the last value if list[j] &lt; list[minpos]: minpos = j #set j as the new minpos if j is less than i list[minpos], list[i] = list[i], list[minpos] #switch positions return list list = [64, 34, 25, 12, 22, 11, 90] selection_sort(list) print(list) . [11, 12, 22, 25, 34, 64, 90] .",
            "url": "https://mmaxwu.github.io/cs/week%204/jupyter/2022/09/19/Reflection.html",
            "relUrl": "/week%204/jupyter/2022/09/19/Reflection.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Sorting Algorithms",
            "content": "Bubble Sort . def bubble_sort(list): index_length = len(list) swapped = False #create variable of swapped and set it to false for i in range(index_length-1): #number of iterations for j in range(0, index_length-1): #for every value between the first value and second to last value if list[j] &gt; list[j+1]: swapped = True #values are swapped list[j], list[j+1] = list[j+1], list[j] #switch positions return list list = [64, 34, 25, 12, 22, 11, 90] bubble_sort(list) print(list) . [11, 12, 22, 25, 34, 64, 90] . Selection Sort . def selection_sort(list): indexing_length = len(list) for i in range(indexing_length - 1): #the number of iterations minpos = i #whatever before i is sorted, whatever after i is unsorted; i is the min position for j in range(i, indexing_length): #for every value between i and the last value if list[j] &lt; list[minpos]: minpos = j #set j as the new minpos if j is less than i list[minpos], list[i] = list[i], list[minpos] #switch positions return list list = [64, 34, 25, 12, 22, 11, 90] selection_sort(list) print(list) . [11, 12, 22, 25, 34, 64, 90] .",
            "url": "https://mmaxwu.github.io/cs/week%204/jupyter/2022/09/18/SortingAlgorithms.html",
            "relUrl": "/week%204/jupyter/2022/09/18/SortingAlgorithms.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "App Lab Quiz",
            "content": "Creation 1: . . Link To Quiz . Here is the first app that I made for fun. The reason I created this quiz is to make my friends laugh. The first question of the quiz makes you believe it is a normal quiz, until you click on the next slide… . Something Different: I utilized the playSound UI control. There will be a “correct” sound when the user gets the answer correct, and a “incorrect” sound when the user gets the answer incorrect. I also utilized the setTimeout control. When I made my first test quiz I found clicking on a “next question” button was annoying, so I found out I could use the setTimeout control to automatically switch to the next page after a set amount of time. . Creation 2: . . Link To Impossible Pong . I have always been fascinated by game developing since I was a kid, and just creating this simple game showed me how tough game developing is. The main challenge of making this game was creating the motion of the opposing paddle. I realized that if I made the pong slow enough, and if I made a uniform motion of the paddle, it is actually impossible for the user to defeat the opponent, so I named my game “Impossible Pong”. Another challenge I faced while creating this game was the fact that everything when out of the borders. After some research, I found the sprites toolbox, which helps all with simple game development. “topEdge” and “bottomEdge” helped me create a border so nothing goes outside of the screen. . Something that I will work on next week is making a pong game with a smart ai, and implementing different difficulties ranging from easy to hard. .",
            "url": "https://mmaxwu.github.io/cs/week%203/jupyter/2022/09/11/AppLabQuiz.html",
            "relUrl": "/week%203/jupyter/2022/09/11/AppLabQuiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Notes from CSP",
            "content": "Week What I learned Link . Week 0 | This week, I learned how to use the basic tools of VSCODE and github. I also learned how to create my first markdown and jupyter notebook pages on my blog. | Week 0 Hacks | . Week 1 | This week, I learned how to check my bash tools, and created my own quiz with python. I added my own cool features like a score counter! In addition, I added another markdown page with links to my other classes. | Week 1 Hacks | . Week 2 | This week, I learned how to use list, dictionaries, and iteration, and created my own quiz using them! In addition, I learned how to add gifs into my about me section, along with tables, links, and more. | Week 2 Hacks | . Week 3 | This week, I learned how to check my bash tools, and created my own quiz with python. I added my own cool features like a score counter! In addition, I added another markdown page with links to my other classes. | Week 3 Hacks | . Week 4 | This week, I learned how to utilize docker to improve my webpage, and I also created some sorted algorithms. | Week 4 Hacks | .",
            "url": "https://mmaxwu.github.io/cs/week%202/jupyter/2022/09/06/table.html",
            "relUrl": "/week%202/jupyter/2022/09/06/table.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "DNHS Bell Schedule(Normal)",
            "content": "Period Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 PM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | .",
            "url": "https://mmaxwu.github.io/cs/week%202/jupyter/2022/09/05/BellSchedule.html",
            "relUrl": "/week%202/jupyter/2022/09/05/BellSchedule.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Loops",
            "content": "InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Max&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;January 25&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxw37962@gmail.com&quot;, &quot;Favorite Music Artists&quot;: [&quot;Pink Floyd&quot;, &quot;The Beatles&quot;, &quot;Jay Chou&quot;, &quot;ABBA&quot;] }) print(InfoDb) . [{&#39;FirstName&#39;: &#39;Max&#39;, &#39;LastName&#39;: &#39;Wu&#39;, &#39;DOB&#39;: &#39;January 25&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;maxw37962@gmail.com&#39;, &#39;Favorite Music Artists&#39;: [&#39;Pink Floyd&#39;, &#39;The Beatles&#39;, &#39;Jay Chou&#39;, &#39;ABBA&#39;]}] . name = &quot;Max Wu&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) print() # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;Html&quot;, &quot;CSS&quot;, &quot;C&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[4], type(langs[4])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Max Wu &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Max Wu&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Max Wu &lt;class &#39;str&#39;&gt; . Reverse List . # create a list of prime numbers prime_numbers = [2, 3, 5, 7] # reverse the order of list elements prime_numbers.reverse() print(&#39; nReversed List&#39;, prime_numbers) . Reversed List [7, 5, 3, 2] . Random List . import random print(&quot; nHave you ever tried authentic Chinese food? Would you like me to give you a random Chinese food you can order?&quot;) ChineseFood = [&quot;麻婆豆腐&quot;, &quot;夫妻肺片&quot;, &quot;回锅肉&quot;, &quot;梅菜扣肉&quot;, &quot;口水鸡&quot;] randomWord = random.choice(ChineseFood) print(&quot;A chinese food you can order is&quot;, randomWord + &quot;!&quot;) . Have you ever tried authentic Chinese food? Would you like me to give you a random Chinese food you can order? A chinese food you can order is 麻婆豆腐! . Slicing A List . list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] elements = slice(4 ,10 ,1) list2 = list1[elements] print(list2) . [5, 6, 7, 8, 9, 10] . Perform similar operation on every element of the list . If you want to perform a set of operations on every element of a list you can do that using the map() function in Python. . mylist = [1,2,3,4,5] def multi(x): return 10*x list(map(multi, mylist)) . [10, 20, 30, 40, 50] . Merging Two Lists To Form A List . Suppose you have two lists and you want to merge the two lists to form a dictionary i.e. the elements from one list will be the keys and the elements from the other lists will be the values. Using the zip() function in python we can do that task with one line of code. . items = [&quot;footballs&quot;, &quot;bats&quot;, &quot;gloves&quot;] price = [100, 40, 80] dictionary = dict(zip(items, price)) print(dictionary) . {&#39;footballs&#39;: 100, &#39;bats&#39;: 40, &#39;gloves&#39;: 80} . List and Dictionaries . InfoDb = [] # Append to List a 2nd Dictionary of key/values #added records for my gender, phone number, and age InfoDb.append({ &quot;FirstName&quot;: &quot;Max&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;January 25&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxw37962@gmail.com&quot;, &quot;PhoneNumber&quot;: &quot;858-568-3019&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Ice Hockey&quot;, &quot;Piano&quot;, &quot;Listening to Music&quot;,] }) #my partner info in dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Nathan&quot;, &quot;LastName&quot;: &quot;Kim&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;December 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nathank51687@stu.powayusd.com&quot;, &quot;PhoneNumber&quot;: &quot;470-266-9499&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Grinding Sat&quot;] }) ####User&#39;s input added to list### FirstName = input(&quot;Enter your first name: &quot;) LastName = input(&quot;Enter your last name: &quot;) Gender = input(&quot;Enter your gender: &quot;) DOB = input(&quot;Enter your birthday: &quot;) Residence = input(&quot;Enter your city: &quot;) Email = input(&quot;Enter your email: &quot;) PhoneNumber = input(&quot;Enter your phone number (with dashes in between): &quot; ) Age = input(&quot;Enter your age: &quot;) #for loop for hobbies, because who only has one hobby ;) Hobbies=[] max_length = 3 while len(Hobbies) &lt; max_length: userHobby = input(&quot;Enter a hobby you enjoy: &quot;) Hobbies.append(userHobby) print(Hobbies) InfoDb.append({ &quot;FirstName&quot;: FirstName, &quot;LastName&quot;: LastName, &quot;Gender&quot;: Gender, &quot;DOB&quot;: DOB, &quot;Residence&quot;: Residence, &quot;Email&quot;: Email, &quot;PhoneNumber&quot;: PhoneNumber, &quot;Age&quot;: Age, &quot;Hobbies&quot;: Hobbies, }) # Print the data structure print(InfoDb) . [&#39;Piano&#39;, &#39;Tennis&#39;, &#39;Cats&#39;] [{&#39;FirstName&#39;: &#39;Max&#39;, &#39;LastName&#39;: &#39;Wu&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;January 25&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;maxw37962@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-568-3019&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Ice Hockey&#39;, &#39;Piano&#39;, &#39;Listening to Music&#39;]}, {&#39;FirstName&#39;: &#39;Nathan&#39;, &#39;LastName&#39;: &#39;Kim&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;December 7&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;nathank51687@stu.powayusd.com&#39;, &#39;PhoneNumber&#39;: &#39;470-266-9499&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Grinding Sat&#39;]}, {&#39;FirstName&#39;: &#39;Lilian&#39;, &#39;LastName&#39;: &#39;Wu&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;January 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;lilianwu08@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-568-3018&#39;, &#39;Age&#39;: &#39;14&#39;, &#39;Hobbies&#39;: [&#39;Piano&#39;, &#39;Tennis&#39;, &#39;Cats&#39;]}] . Formatted Output of Dictionary . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Gender:&quot;, d_rec[&quot;Gender&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Phone Number:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Age:&quot;, d_rec[&quot;Age&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;Formatted for loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Formatted for loop output Max Wu Gender: Male Birth Day: January 25 Residence: San Diego Email: maxw37962@gmail.com Phone Number: 858-568-3019 Age: 16 Hobbies: Ice Hockey, Piano, Listening to Music Nathan Kim Gender: Male Birth Day: December 7 Residence: San Diego Email: nathank51687@stu.powayusd.com Phone Number: 470-266-9499 Age: 16 Hobbies: Grinding Sat Lilian Wu Gender: Female Birth Day: January 2 Residence: San Diego Email: lilianwu08@gmail.com Phone Number: 858-568-3018 Age: 14 Hobbies: Piano, Tennis, Cats . While Loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Max Wu Gender: Male Birth Day: January 25 Residence: San Diego Email: maxw37962@gmail.com Phone Number: 858-568-3019 Age: 16 Hobbies: Ice Hockey, Piano, Listening to Music Nathan Kim Gender: Male Birth Day: December 7 Residence: San Diego Email: nathank51687@stu.powayusd.com Phone Number: 470-266-9499 Age: 16 Hobbies: Grinding Sat Lilian Wu Gender: Female Birth Day: January 2 Residence: San Diego Email: lilianwu08@gmail.com Phone Number: 858-568-3018 Age: 14 Hobbies: Piano, Tennis, Cats . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Max Wu Gender: Male Birth Day: January 25 Residence: San Diego Email: maxw37962@gmail.com Phone Number: 858-568-3019 Age: 16 Hobbies: Ice Hockey, Piano, Listening to Music Nathan Kim Gender: Male Birth Day: December 7 Residence: San Diego Email: nathank51687@stu.powayusd.com Phone Number: 470-266-9499 Age: 16 Hobbies: Grinding Sat Lilian Wu Gender: Female Birth Day: January 2 Residence: San Diego Email: lilianwu08@gmail.com Phone Number: 858-568-3018 Age: 14 Hobbies: Piano, Tennis, Cats . Quiz Using Dictionary . from re import S questions = 5 #number of quiz questions correct = 0 user_input = 0 print(&quot;This is a 5 question trivia quiz, good luck!&quot;) def question_and_answer(prompt, answer): global correct print(&quot;Question: &quot; + prompt) user_input = input() #takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) user_input = user_input.lower() #convert user&#39;s input to lowercase answer = answer.lower() # Force answer to lowercase as well if answer == user_input: print(&quot;Correct Answer&quot;) correct += 1 else: print (&quot;Incorrect Answer&quot;) #print (&quot;Answer : &quot; + answer) #print (&quot;User Input is : &quot; + user_input) return user_input question_1 = question_and_answer(&quot;How many bones are in the human body?&quot;, &quot;206&quot;) question_2 = question_and_answer(&quot;What is the hardest natural substance on Earth?&quot;, &quot;Diamond&quot;) question_3 = question_and_answer(&quot;What is the most abundant gas in the Earth&#39;s atmosphere?&quot;, &quot;Nitrogen&quot;) question_4 = question_and_answer(&quot;What is the biggest planet in our solar system?&quot;, &quot;Jupiter&quot;) question_5 = question_and_answer(&quot;Which famous British physicist wrote A Brief History of Time?&quot;, &quot;Stephen Hawking&quot;) if correct &lt; 3: print(f&#39;You scored {correct} correct answers out of 5, better luck next time!&#39;) elif correct &lt; 5: print(f&#39;You scored {correct} correct answers out of 5, nice try!&#39;) else: print(f&#39;You scored {correct} correct answers out of 5, nice going you trivia star!&#39;) . This is a 5 question trivia quiz, good luck! Question: How many bones are in the human body? Answer: 206 Correct Answer Question: What is the hardest natural substance on Earth? Answer: diamond Correct Answer Question: What is the most abundant gas in the Earth&#39;s atmosphere? Answer: nitrogen Correct Answer Question: What is the biggest planet in our solar system? Answer: jupiter Correct Answer Question: Which famous British physicist wrote A Brief History of Time? Answer: stephen hawking Correct Answer You scored 5 correct answers out of 5, nice going you trivia star! .",
            "url": "https://mmaxwu.github.io/cs/week%202/jupyter/2022/09/02/loops.html",
            "relUrl": "/week%202/jupyter/2022/09/02/loops.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Bash Tool Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /Users/lixiwu/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/lixiwu/Library/Jupyter/kernels/bash javascript /Users/lixiwu/Library/Jupyter/kernels/javascript python3 /Users/lixiwu/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/lixiwu/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://mmaxwu.github.io/cs/week%201/jupyter/2022/08/28/bash-tool-checks.html",
            "relUrl": "/week%201/jupyter/2022/08/28/bash-tool-checks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "CS Key Terminology Quiz",
            "content": "def q_and_a(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 print(&quot;Hello, you will be taking the vocabulary test.&quot;) print(&quot;Do you wish to proceed?(y/n)&quot;) msg = input() while (msg!=&quot;y&quot;) : print(&quot;ERROR, YOU HAVE TO SAY YES, DON&#39;T HAVE A CHOICE&quot;) msg = input() print(&quot;You may now proceed&quot;) rsp = q_and_a(&quot;Does static text change? (yes/no)&quot;) if rsp == &quot;no&quot;: print(rsp +&quot; is correct&quot;) correct += 1 else: print(rsp +&quot; is wrong :(&quot;) rsp = q_and_a(&quot;At least how many lines are required to form a sequence of code?(1-4)&quot;) if rsp == &quot;2&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;Is Input and Output in jupyter notebooks in line with Output?(yes/no)&quot;) if rsp == &quot;no&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;Is the computer mice an input?(yes/no)&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;What is a number with a decimal in it called?&quot;) if rsp == &quot;float&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;What is a set of instructions that a computer follows in order to complete a task called?&quot;) if rsp == &quot;program&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(&quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, you will be taking the vocabulary test. Do you wish to proceed?(y/nou may now proceed Question: Does static text change? (yes/no) N is wrong :( Question: At least how many lines are required to form a sequence of code?(1-4) 2 is correct! Question: Is Input and Output in jupyter notebooks in line with Output?(yes/no) NO is incorrect! Question: Is the computer mice an input?(yes/no) YES is incorrect! Question: What is a number with a deciminal in it called? float is correct!! Question: What is a set of instructions that a computer follows in order to complete a task called? program is correct!! you scored 3/6 .",
            "url": "https://mmaxwu.github.io/cs/week%201/jupyter/2022/08/27/Quiz.html",
            "relUrl": "/week%201/jupyter/2022/08/27/Quiz.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "AP Physics Fast Page",
            "content": "AP Physics Fast Page . Unit 1: Introduction &amp; Measurements . . Canvas . Dimensions to know 10^-9 nano | 10^-6 micro | 10^-3 milli | 10^-3 centi | 10^-1 deci | 10^1 deca | 10^3 kilo | 10^6 mega | 10^9 giga | . | Sig figs All numbers between SF are significant | All non-zero digits are significant | Leading zeroes are never significant | All trailing zeroes with decimal points are significant | Multiplication/Division: same number of SF as term with least amount of SF | Addition/Subtraction: same number of digits to right of DECIMAl as measurement with smallest number of digits to the right of the decimal | . | . Lab 1 . .",
            "url": "https://mmaxwu.github.io/cs/week%201/jupyter/2022/08/27/AP-Physics-Fastpages.html",
            "relUrl": "/week%201/jupyter/2022/08/27/AP-Physics-Fastpages.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Sample Markdown Post",
            "content": "Hi! Welcome to my first markdown post! .",
            "url": "https://mmaxwu.github.io/cs/week%200/jupyter/2022/08/21/Markdown-Post.html",
            "relUrl": "/week%200/jupyter/2022/08/21/Markdown-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Welcome To My Jupyter Notebooks",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://mmaxwu.github.io/cs/week%200/jupyter/2022/08/21/Hello-World.html",
            "relUrl": "/week%200/jupyter/2022/08/21/Hello-World.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Binary",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | .",
            "url": "https://mmaxwu.github.io/cs/week%2012/jupyter/2022/07/07/PBL-binary.html",
            "relUrl": "/week%2012/jupyter/2022/07/07/PBL-binary.html",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "College Board Notes",
          "content": "Notes . 1.1 . Collboration . Effective collaboration produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it | A computing innovation includes a program as an integral part of its function | A computing innovation can be physical (eg. self-driving car), nonphysical computing software (eg. picture editing software), or a nonphysical computing concept (eg. e-commerce) | Collaboration that includes diverse perspectives helps avoid bias in development | . How to collaborate in class? . Two programmers work together as a pair. One (the driver) writes program code, while the other (the observer, pointer, or navigator) reviews each line of program code as it is typed in | Don’t be a back-seated programmer! | Think-Pair-Share: Students think through a problem alone, pair with a partner to share ideas, and then share results with the class | Leave comments in code Communicate to your partner(s) | Communicate to yourself | Acknowledge code segments used from other sources | Acknowledge media used form other sources | Differentiate what you and your partner(s) did | Clarify the functionality of yoru code | . | Online tools: repl.it - multiplayer | Github - collaboration and repository | Share document or folder | Ask friends and family to test your program and give you feedback | Check with your teacher | . | . 1.2 . Computing Innovations . Applications Games | Social Media | Business | Productivity | . | Physical Devices Computers | Smart Phones/tablets | Smart “Things” | Wearables | . | Systems E-commerce | Cloud services | E-mail | . | . Inputs and Outputs . Input can come from a user or other programs Tactile (touch) | Audio | Visual | Text (including numerical values) | . | How do programs receive input? Most programs are written in an event driven environment Events are triggered by some action, which usually sends input to the program | . | . | What does input accomplish in a program? Input usually affects the output | . | What are outputs produced by a device? Visual | Audio | Tactile (touch/feel) | Text | . | How does a program know what to do upon an event? An action triggers an event Action may be initiated by the user or another program/device | . | . | The program code is not necessarily executed “in order” Code segments are executed as they are called, according to the events triggered | . | . What is a program . A program is a collection of statements A statement is a single command | A group of statements is called a code segment | Code segments are executed according to the rules of the programming language | . | . 1.3 . How is a program developed? . It starts with an idea Programs are developed with a specific purpose in mind | Developers follow specific steps and stick to their plan | Sometimes the development is more exploratory than anything, and the steps are dictated by what happens (both good and bad) | . | Developers start investigating the problem/purpose and reflect Investigation is an important step in the process | Developers must: Determine the requirements of the program | Understand the constraints | . | How do developers investigate? Surveys | User testing | Interviews | Direct observations | . | . | Design the program | Testing, testing, and more testing! | . How is a program developed . Program development is rarely a solo endeavor Programs are usually developed by teams of people | Individuals/teams work on different functional components | Each member of the project deserves to receive credit for their work | Their names must be written in the documentation of the program indicating their contributions to the project | . | Can use comments within the programming language to give credit | Many times developers use code segments, procedures, algorithms, and more that are written by others Need to give credit | The program documentation should include the author’s name and the source of any code segments being used | May resemble a bibliography or works cited page Program documentation | . | Describes the overall program | List program specifications | Where does documentation happen Happens throughout the development of the program At the beginning: list specifications | During: to keep track of process | After: to explain the overall process | . | . | . 1.4 . Errors in an algorithm program . 4.1 . How do computing devices work together in a network? . Computers were once big. They grew smaller and smaller as time evolved. | Computers (their users) wanted to talk Computers are capable of sending and receiving data A packet is a small amount of data sent over a network. Each packet also includes the source and the destination information | . | . | So how do we get computer to connect and communicate? A computer network is a group of interconnected computing devices capable of sending or receiving data | A computer system is a group of computing devices and programs working together for a joint purpose | . | A bandwidth is the maximum amount of data that can be sent in a fixed amount of time on a computer network | . 4.2 . . 2.1 . Binary Numbers . Binary is a number system that uses two digits 1 is on | 0 is off | . | Binary digit (bit) is the smallest unit of data in computing | Byte is a group of 8 bits | Analog: a mechanism, device, or technology that represents data by measurement of a continuous physical variable | The use of digital data to approximate real world analog data is an example of abstraction Final MC . Even though I didn’t make too many mistakes on the test, I had a few uncertain questions that I would like to delve deeper into. The first topic that I wasn’t too clear about is the internet. . | . 3.17 . Algorithmic Efficiency . an estimation of the amount of computational resources used by an algorithm; this can be determined through formal or mathematical reasoning; an informal estimation can be completed by determining the number of times a statement or group of statement executes | | . From this question, I concluded that I really just needed to memorize that information, even though it is not particularly useful for the CSP class. . The next topic that I needed to focus on is binary. Previous to the final exam, I only had a brief idea of what binary is and mainly guessed the answers for the test. After the test, I located the binary video from collegeboard, and took notes on it, now I am a lot clear on binary questions. . Before solving this problem, I mainly just guessed, but after watching the collegeboard videos I now understand how to do this question. Binary 0011 is equivalent to 2^1+2^0, or decimal 3. Binary 0110 is equivalent to 2^2+2^1, or decimal 6. Binary 1111 is equivalent to 2^3+2^2+2^1+2^0, or decimal 15. Decimal 9 is not equivalent to any of the given binary numbers. . Another type of problem that I struggled with is value swapping. The important thing about value swapping is setting a temporary variable for what you want to swap. For example, if you want to swap num1 and num2, you would assign a temp value to num1 first, then assign the value of num2 to num1, and then lastly assign the original value of num1, which is stored in temp, to num2. The original values of num1 to num2 are now interchanged . Something else that I had issues with is the vocabulary. I had difficulty distinguishing between &quot;all other&quot;, &quot;subsequent&quot;, &quot;immediately follows&quot;, and &quot;immediately precedes&quot;. I guessed that the choice is &quot;subsequent&quot; because immediately follows and immediately precedes is similar in definition, and the answer is definitely not all other, so I chose the last option left.Later on, I went back to the problem to find an explanation why the correct choice is &quot;subsequent&quot;, and that is because the outer loop iterates from the first element in the list to the second-to-last element in the list. For each iteration of the outer loop, the inner loop compares that element to every subsequent element in the array. .",
          "url": "https://mmaxwu.github.io/cs/CollegeboardNotes/",
          "relUrl": "/CollegeboardNotes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "Max is a Junior at Del Norte High School. . . You can find him at: . Instagram: Max Wu | Discord: lil wuzi vert #3917 | . . . .",
          "url": "https://mmaxwu.github.io/cs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "API",
          "content": "| Overview | Weather | COVID19 | .",
          "url": "https://mmaxwu.github.io/cs/api/overview",
          "relUrl": "/api/overview",
          "date": ""
      }
      
  

  

  
      ,"page5": {
          "title": "Javascript",
          "content": "Table | Sorting Algorithms | .",
          "url": "https://mmaxwu.github.io/cs/javascript/",
          "relUrl": "/javascript/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page10": {
          "title": "Vocab",
          "content": "If statement - If proved true, performs a function . Variable - A value that can change depending on the conditions . console.log - command or function for javascript . Static text, as it doesn&#39;t change - A string literal; ex: &quot;Hello, World&quot; . Sequence of code - Two or more lines forms a sequence . Definition of a function - Allows for a collection of data . Definition of a prototype - Allows for the definition of a method associated with the function . Firewall - ? . http traffic - ? . API - Allows many opportunities in data science . Metadata - Data about the data ex. front matter .",
          "url": "https://mmaxwu.github.io/cs/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mmaxwu.github.io/cs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}