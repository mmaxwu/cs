{
  
    
        "post0": {
            "title": "Sorting Algorithms",
            "content": "Bubble Sort . def bubble_sort(list): index_length = len(list) swapped = False #create variable of swapped and set it to false for i in range(index_length-1): #number of iterations for j in range(0, index_length-1): #for every value between the first value and second to last value if list[j] &gt; list[j+1]: swapped = True #values are swapped list[j], list[j+1] = list[j+1], list[j] #switch positions return list list = [64, 34, 25, 12, 22, 11, 90] bubble_sort(list) print(list) . [11, 12, 22, 25, 34, 64, 90] . Selection Sort . def selection_sort(list): indexing_length = len(list) for i in range(indexing_length - 1): #the number of iterations minpos = i #whatever before i is sorted, whatever after i is unsorted; i is the min position for j in range(i, indexing_length): #for every value between i and the last value if list[j] &lt; list[minpos]: minpos = j #set j as the new minpos if j is less than i list[minpos], list[i] = list[i], list[minpos] #switch positions return list list = [64, 34, 25, 12, 22, 11, 90] selection_sort(list) print(list) . [11, 12, 22, 25, 34, 64, 90] .",
            "url": "https://mmaxwu.github.io/cs/2022/09/18/SortingAlgorithms.html",
            "relUrl": "/2022/09/18/SortingAlgorithms.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "App Lab Quiz",
            "content": "Creation 1: . . Link To Quiz . Here is the first app that I made for fun. The reason I created this quiz is to make my friends laugh. The first question of the quiz makes you believe it is a normal quiz, until you click on the next slide… . Something Different: I utilized the playSound UI control. There will be a “correct” sound when the user gets the answer correct, and a “incorrect” sound when the user gets the answer incorrect. I also utilized the setTimeout control. When I made my first test quiz I found clicking on a “next question” button was annoying, so I found out I could use the setTimeout control to automatically switch to the next page after a set amount of time. . Creation 2: . . Link To Impossible Pong . I have always been fascinated by game developing since I was a kid, and just creating this simple game showed me how tough game developing is. The main challenge of making this game was creating the motion of the opposing paddle. I realized that if I made the pong slow enough, and if I made a uniform motion of the paddle, it is actually impossible for the user to defeat the opponent, so I named my game “Impossible Pong”. Another challenge I faced while creating this game was the fact that everything when out of the borders. After some research, I found the sprites toolbox, which helps all with simple game development. “topEdge” and “bottomEdge” helped me create a border so nothing goes outside of the screen. . Something that I will work on next week is making a pong game with a smart ai, and implementing different difficulties ranging from easy to hard. .",
            "url": "https://mmaxwu.github.io/cs/week%203/jupyter/2022/09/11/AppLabQuiz.html",
            "relUrl": "/week%203/jupyter/2022/09/11/AppLabQuiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Notes from CSP",
            "content": "Week What I learned Link . Week 0 | This week, I learned how to use the basic tools of VSCODE and github. I also learned how to create my first markdown and jupyter notebook pages on my blog. | Week 0 Hacks | . Week 1 | This week, I learned how to check my bash tools, and created my own quiz with python. I added my own cool features like a score counter! In addition, I added another markdown page with links to my other classes. | Week 1 Hacks | . Week 2 | This week, I learned how to use list, dictionaries, and iteration, and created my own quiz using them! In addition, I learned how to add gifs into my about me section, along with tables, links, and more. | Week 2 Hacks | . Week 3 | This week, I learned how to check my bash tools, and created my own quiz with python. I added my own cool features like a score counter! In addition, I added another markdown page with links to my other classes. | Week 3 Hacks | .",
            "url": "https://mmaxwu.github.io/cs/week%202/jupyter/2022/09/06/table.html",
            "relUrl": "/week%202/jupyter/2022/09/06/table.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "DNHS Bell Schedule(Normal)",
            "content": "Period Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 PM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | .",
            "url": "https://mmaxwu.github.io/cs/week%202/jupyter/2022/09/05/BellSchedule.html",
            "relUrl": "/week%202/jupyter/2022/09/05/BellSchedule.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Loops",
            "content": "InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;Max&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;DOB&quot;: &quot;January 25&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxw37962@gmail.com&quot;, &quot;Favorite Music Artists&quot;: [&quot;Pink Floyd&quot;, &quot;The Beatles&quot;, &quot;Jay Chou&quot;, &quot;ABBA&quot;] }) print(InfoDb) . [{&#39;FirstName&#39;: &#39;Max&#39;, &#39;LastName&#39;: &#39;Wu&#39;, &#39;DOB&#39;: &#39;January 25&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;maxw37962@gmail.com&#39;, &#39;Favorite Music Artists&#39;: [&#39;Pink Floyd&#39;, &#39;The Beatles&#39;, &#39;Jay Chou&#39;, &#39;ABBA&#39;]}] . name = &quot;Max Wu&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) print() # variable of type float score = 100.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;Html&quot;, &quot;CSS&quot;, &quot;C&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[4], type(langs[4])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Max Wu &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 100.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Java &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Max Wu&#39;, &#39;age&#39;: 16, &#39;score&#39;: 100.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;Html&#39;, &#39;CSS&#39;, &#39;C&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Max Wu &lt;class &#39;str&#39;&gt; . Reverse List . # create a list of prime numbers prime_numbers = [2, 3, 5, 7] # reverse the order of list elements prime_numbers.reverse() print(&#39; nReversed List&#39;, prime_numbers) . Reversed List [7, 5, 3, 2] . Random List . import random print(&quot; nHave you ever tried authentic Chinese food? Would you like me to give you a random Chinese food you can order?&quot;) ChineseFood = [&quot;麻婆豆腐&quot;, &quot;夫妻肺片&quot;, &quot;回锅肉&quot;, &quot;梅菜扣肉&quot;, &quot;口水鸡&quot;] randomWord = random.choice(ChineseFood) print(&quot;A chinese food you can order is&quot;, randomWord + &quot;!&quot;) . Have you ever tried authentic Chinese food? Would you like me to give you a random Chinese food you can order? A chinese food you can order is 麻婆豆腐! . Slicing A List . list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] elements = slice(4 ,10 ,1) list2 = list1[elements] print(list2) . [5, 6, 7, 8, 9, 10] . Perform similar operation on every element of the list . If you want to perform a set of operations on every element of a list you can do that using the map() function in Python. . mylist = [1,2,3,4,5] def multi(x): return 10*x list(map(multi, mylist)) . [10, 20, 30, 40, 50] . Merging Two Lists To Form A List . Suppose you have two lists and you want to merge the two lists to form a dictionary i.e. the elements from one list will be the keys and the elements from the other lists will be the values. Using the zip() function in python we can do that task with one line of code. . items = [&quot;footballs&quot;, &quot;bats&quot;, &quot;gloves&quot;] price = [100, 40, 80] dictionary = dict(zip(items, price)) print(dictionary) . {&#39;footballs&#39;: 100, &#39;bats&#39;: 40, &#39;gloves&#39;: 80} . List and Dictionaries . InfoDb = [] # Append to List a 2nd Dictionary of key/values #added records for my gender, phone number, and age InfoDb.append({ &quot;FirstName&quot;: &quot;Max&quot;, &quot;LastName&quot;: &quot;Wu&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;January 25&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;maxw37962@gmail.com&quot;, &quot;PhoneNumber&quot;: &quot;858-568-3019&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Ice Hockey&quot;, &quot;Piano&quot;, &quot;Listening to Music&quot;,] }) #my partner info in dictionary InfoDb.append({ &quot;FirstName&quot;: &quot;Nathan&quot;, &quot;LastName&quot;: &quot;Kim&quot;, &quot;Gender&quot;: &quot;Male&quot;, &quot;DOB&quot;: &quot;December 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;nathank51687@stu.powayusd.com&quot;, &quot;PhoneNumber&quot;: &quot;470-266-9499&quot;, &quot;Age&quot;: &quot;16&quot;, &quot;Hobbies&quot;: [&quot;Grinding Sat&quot;] }) ####User&#39;s input added to list### FirstName = input(&quot;Enter your first name: &quot;) LastName = input(&quot;Enter your last name: &quot;) Gender = input(&quot;Enter your gender: &quot;) DOB = input(&quot;Enter your birthday: &quot;) Residence = input(&quot;Enter your city: &quot;) Email = input(&quot;Enter your email: &quot;) PhoneNumber = input(&quot;Enter your phone number (with dashes in between): &quot; ) Age = input(&quot;Enter your age: &quot;) #for loop for hobbies, because who only has one hobby ;) Hobbies=[] max_length = 3 while len(Hobbies) &lt; max_length: userHobby = input(&quot;Enter a hobby you enjoy: &quot;) Hobbies.append(userHobby) print(Hobbies) InfoDb.append({ &quot;FirstName&quot;: FirstName, &quot;LastName&quot;: LastName, &quot;Gender&quot;: Gender, &quot;DOB&quot;: DOB, &quot;Residence&quot;: Residence, &quot;Email&quot;: Email, &quot;PhoneNumber&quot;: PhoneNumber, &quot;Age&quot;: Age, &quot;Hobbies&quot;: Hobbies, }) # Print the data structure print(InfoDb) . [&#39;Piano&#39;, &#39;Tennis&#39;, &#39;Cats&#39;] [{&#39;FirstName&#39;: &#39;Max&#39;, &#39;LastName&#39;: &#39;Wu&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;January 25&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;maxw37962@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-568-3019&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Ice Hockey&#39;, &#39;Piano&#39;, &#39;Listening to Music&#39;]}, {&#39;FirstName&#39;: &#39;Nathan&#39;, &#39;LastName&#39;: &#39;Kim&#39;, &#39;Gender&#39;: &#39;Male&#39;, &#39;DOB&#39;: &#39;December 7&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;nathank51687@stu.powayusd.com&#39;, &#39;PhoneNumber&#39;: &#39;470-266-9499&#39;, &#39;Age&#39;: &#39;16&#39;, &#39;Hobbies&#39;: [&#39;Grinding Sat&#39;]}, {&#39;FirstName&#39;: &#39;Lilian&#39;, &#39;LastName&#39;: &#39;Wu&#39;, &#39;Gender&#39;: &#39;Female&#39;, &#39;DOB&#39;: &#39;January 2&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;lilianwu08@gmail.com&#39;, &#39;PhoneNumber&#39;: &#39;858-568-3018&#39;, &#39;Age&#39;: &#39;14&#39;, &#39;Hobbies&#39;: [&#39;Piano&#39;, &#39;Tennis&#39;, &#39;Cats&#39;]}] . Formatted Output of Dictionary . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Gender:&quot;, d_rec[&quot;Gender&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Phone Number:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Age:&quot;, d_rec[&quot;Age&quot;]) print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;Formatted for loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . Formatted for loop output Max Wu Gender: Male Birth Day: January 25 Residence: San Diego Email: maxw37962@gmail.com Phone Number: 858-568-3019 Age: 16 Hobbies: Ice Hockey, Piano, Listening to Music Nathan Kim Gender: Male Birth Day: December 7 Residence: San Diego Email: nathank51687@stu.powayusd.com Phone Number: 470-266-9499 Age: 16 Hobbies: Grinding Sat Lilian Wu Gender: Female Birth Day: January 2 Residence: San Diego Email: lilianwu08@gmail.com Phone Number: 858-568-3018 Age: 14 Hobbies: Piano, Tennis, Cats . While Loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Max Wu Gender: Male Birth Day: January 25 Residence: San Diego Email: maxw37962@gmail.com Phone Number: 858-568-3019 Age: 16 Hobbies: Ice Hockey, Piano, Listening to Music Nathan Kim Gender: Male Birth Day: December 7 Residence: San Diego Email: nathank51687@stu.powayusd.com Phone Number: 470-266-9499 Age: 16 Hobbies: Grinding Sat Lilian Wu Gender: Female Birth Day: January 2 Residence: San Diego Email: lilianwu08@gmail.com Phone Number: 858-568-3018 Age: 14 Hobbies: Piano, Tennis, Cats . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Max Wu Gender: Male Birth Day: January 25 Residence: San Diego Email: maxw37962@gmail.com Phone Number: 858-568-3019 Age: 16 Hobbies: Ice Hockey, Piano, Listening to Music Nathan Kim Gender: Male Birth Day: December 7 Residence: San Diego Email: nathank51687@stu.powayusd.com Phone Number: 470-266-9499 Age: 16 Hobbies: Grinding Sat Lilian Wu Gender: Female Birth Day: January 2 Residence: San Diego Email: lilianwu08@gmail.com Phone Number: 858-568-3018 Age: 14 Hobbies: Piano, Tennis, Cats . Quiz Using Dictionary . from re import S questions = 5 #number of quiz questions correct = 0 user_input = 0 print(&quot;This is a 5 question trivia quiz, good luck!&quot;) def question_and_answer(prompt, answer): global correct print(&quot;Question: &quot; + prompt) user_input = input() #takes user&#39;s input as variable msg print(&quot;Answer: &quot; + user_input) user_input = user_input.lower() #convert user&#39;s input to lowercase answer = answer.lower() # Force answer to lowercase as well if answer == user_input: print(&quot;Correct Answer&quot;) correct += 1 else: print (&quot;Incorrect Answer&quot;) #print (&quot;Answer : &quot; + answer) #print (&quot;User Input is : &quot; + user_input) return user_input question_1 = question_and_answer(&quot;How many bones are in the human body?&quot;, &quot;206&quot;) question_2 = question_and_answer(&quot;What is the hardest natural substance on Earth?&quot;, &quot;Diamond&quot;) question_3 = question_and_answer(&quot;What is the most abundant gas in the Earth&#39;s atmosphere?&quot;, &quot;Nitrogen&quot;) question_4 = question_and_answer(&quot;What is the biggest planet in our solar system?&quot;, &quot;Jupiter&quot;) question_5 = question_and_answer(&quot;Which famous British physicist wrote A Brief History of Time?&quot;, &quot;Stephen Hawking&quot;) if correct &lt; 3: print(f&#39;You scored {correct} correct answers out of 5, better luck next time!&#39;) elif correct &lt; 5: print(f&#39;You scored {correct} correct answers out of 5, nice try!&#39;) else: print(f&#39;You scored {correct} correct answers out of 5, nice going you trivia star!&#39;) . This is a 5 question trivia quiz, good luck! Question: How many bones are in the human body? Answer: 206 Correct Answer Question: What is the hardest natural substance on Earth? Answer: diamond Correct Answer Question: What is the most abundant gas in the Earth&#39;s atmosphere? Answer: nitrogen Correct Answer Question: What is the biggest planet in our solar system? Answer: jupiter Correct Answer Question: Which famous British physicist wrote A Brief History of Time? Answer: stephen hawking Correct Answer You scored 5 correct answers out of 5, nice going you trivia star! .",
            "url": "https://mmaxwu.github.io/cs/week%202/jupyter/2022/09/02/loops.html",
            "relUrl": "/week%202/jupyter/2022/09/02/loops.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Bash Tool Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /Users/lixiwu/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/lixiwu/Library/Jupyter/kernels/bash javascript /Users/lixiwu/Library/Jupyter/kernels/javascript python3 /Users/lixiwu/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/lixiwu/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://mmaxwu.github.io/cs/week%201/jupyter/2022/08/28/bash-tool-checks.html",
            "relUrl": "/week%201/jupyter/2022/08/28/bash-tool-checks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "CS Key Terminology Quiz",
            "content": "def q_and_a(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 6 correct = 0 print(&quot;Hello, you will be taking the vocabulary test.&quot;) print(&quot;Do you wish to proceed?(y/n)&quot;) msg = input() while (msg!=&quot;y&quot;) : print(&quot;ERROR, YOU HAVE TO SAY YES, DON&#39;T HAVE A CHOICE&quot;) msg = input() print(&quot;You may now proceed&quot;) rsp = q_and_a(&quot;Does static text change? (yes/no)&quot;) if rsp == &quot;no&quot;: print(rsp +&quot; is correct&quot;) correct += 1 else: print(rsp +&quot; is wrong :(&quot;) rsp = q_and_a(&quot;At least how many lines are required to form a sequence of code?(1-4)&quot;) if rsp == &quot;2&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;Is Input and Output in jupyter notebooks in line with Output?(yes/no)&quot;) if rsp == &quot;no&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;Is the computer mice an input?(yes/no)&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;What is a number with a decimal in it called?&quot;) if rsp == &quot;float&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = q_and_a(&quot;What is a set of instructions that a computer follows in order to complete a task called?&quot;) if rsp == &quot;program&quot;: print(rsp + &quot; is correct!!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(&quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, you will be taking the vocabulary test. Do you wish to proceed?(y/nou may now proceed Question: Does static text change? (yes/no) N is wrong :( Question: At least how many lines are required to form a sequence of code?(1-4) 2 is correct! Question: Is Input and Output in jupyter notebooks in line with Output?(yes/no) NO is incorrect! Question: Is the computer mice an input?(yes/no) YES is incorrect! Question: What is a number with a deciminal in it called? float is correct!! Question: What is a set of instructions that a computer follows in order to complete a task called? program is correct!! you scored 3/6 .",
            "url": "https://mmaxwu.github.io/cs/week%201/jupyter/2022/08/27/Quiz.html",
            "relUrl": "/week%201/jupyter/2022/08/27/Quiz.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "AP Physics Fast Page",
            "content": "AP Physics Fast Page . Unit 1: Introduction &amp; Measurements . . Canvas . Dimensions to know 10^-9 nano | 10^-6 micro | 10^-3 milli | 10^-3 centi | 10^-1 deci | 10^1 deca | 10^3 kilo | 10^6 mega | 10^9 giga | . | Sig figs All numbers between SF are significant | All non-zero digits are significant | Leading zeroes are never significant | All trailing zeroes with decimal points are significant | Multiplication/Division: same number of SF as term with least amount of SF | Addition/Subtraction: same number of digits to right of DECIMAl as measurement with smallest number of digits to the right of the decimal | . | . Lab 1 . .",
            "url": "https://mmaxwu.github.io/cs/week%201/jupyter/2022/08/27/AP-Physics-Fastpages.html",
            "relUrl": "/week%201/jupyter/2022/08/27/AP-Physics-Fastpages.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Sample Markdown Post",
            "content": "Hi! Welcome to my first markdown post! .",
            "url": "https://mmaxwu.github.io/cs/week%200/jupyter/2022/08/21/Markdown-Post.html",
            "relUrl": "/week%200/jupyter/2022/08/21/Markdown-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Welcome To My Jupyter Notebooks",
            "content": "msg = &quot;Hello World&quot; print(msg) . Hello World .",
            "url": "https://mmaxwu.github.io/cs/week%200/jupyter/2022/08/21/Hello-World.html",
            "relUrl": "/week%200/jupyter/2022/08/21/Hello-World.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Max is a Junior at Del Norte High School. . . You can find him at: . Instagram: Max Wu | Discord: lil wuzi vert #3917 | . . . .",
          "url": "https://mmaxwu.github.io/cs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "Vocab",
          "content": "If statement - If proved true, performs a function . Variable - A value that can change depending on the conditions . Jupyter - Lets you write and run code at the same time .",
          "url": "https://mmaxwu.github.io/cs/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mmaxwu.github.io/cs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}